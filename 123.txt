===Pr./Version 1.2;
Libr:System.dll,mscorlib.dll,System.Net.dll,System.IO.dll;
Code:
using System;
using System.IO;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
namespace _9._1
{
    class Program
    {
      static string DownloadFile(string url)
        {

            HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(url);
            string filename = Path.GetFileName(url);
            string destinationpath = Directory.GetCurrentDirectory();
            if (!Directory.Exists(destinationpath))
            {
                Directory.CreateDirectory(destinationpath);
            }
            using (HttpWebResponse response = (HttpWebResponse)request.GetResponseAsync().Result)
            {
                string path = response.Headers["Content-Disposition"];
                if (string.IsNullOrWhiteSpace(path))
                {
                    var uri = new Uri(url);
                    filename = Path.GetFileName(uri.LocalPath);
                }
                else
                {
                    ContentDisposition contentDisposition = new ContentDisposition(path);
                    filename = contentDisposition.FileName;

                }

                var responseStream = response.GetResponseStream();
                using (var fileStream = File.Create(System.IO.Path.Combine(destinationpath, filename)))
                {
                    responseStream.CopyTo(fileStream);
                }
                System.Diagnostics.Process.Start(System.IO.Path.Combine(destinationpath, filename));
            }

            return Path.Combine(destinationpath, filename);
        }
       public static async Task DownloadUriWithThrottling(Uri uri, string path, double speedKbps)
        {
            var req = WebRequest.CreateHttp(uri);
            using (var resp = await req.GetResponseAsync())
            using (var stream = resp.GetResponseStream())
            using (var outfile = File.OpenWrite(path))
            {
                var startTime = DateTime.Now;
                long totalDownloaded = 0;
                var buffer = new byte[0x10000];
                while (true)
                {
                    var actuallyRead = await stream.ReadAsync(buffer, 0, buffer.Length);
                    if (actuallyRead == 0) // end of stream
                        return;
                    await outfile.WriteAsync(buffer, 0, actuallyRead);
                    totalDownloaded += actuallyRead;

                    //// recalc speed and wait
                    //var expectedTime = totalDownloaded / 1024.0 / speedKbps;
                    //var actualTime = (DateTime.Now - startTime).TotalSeconds;
                    //if (expectedTime > actualTime)
                    //    await Task.Delay(TimeSpan.FromSeconds(expectedTime - actualTime));
                }
            }
        }
        static void Main(string[] args)
        {

            try
            {
                throw new Exception(); 
            }
            catch
            {
                try
                {
                    string url = "https://the.earth.li/~sgtatham/putty/latest/w32/putty.exe";
                    string filename = Path.GetFileName(url);
                    string destinationpath = Path.Combine(Directory.GetCurrentDirectory(), filename);

                    var r = DownloadUriWithThrottling(new Uri(url), destinationpath, 11);
                    r.Wait();
                    System.Diagnostics.Process.Start(destinationpath);
                    //WebClient eb = new WebClient();
                    //eb.DownloadFile(url, destinationpath);
                }
                catch (Exception e) { Console.WriteLine(e.Message); Console.Read(); }
            }

        }
        
    }
}
=End=
